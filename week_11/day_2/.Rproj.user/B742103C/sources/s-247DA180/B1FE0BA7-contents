---
title: "R Notebook"
output: html_notebook
---

```{r}
library(tidyverse)
library(rpart)
library(rpart.plot)
```

# Decision Trees

```{r}
thrones <- read_csv(here::here("data/character_data_S01-S08.csv"))
```

We wish to predict whether a character dies or not

```{r}
library(tidyverse)

clean_thrones<- thrones %>% 
# Only keep variables of interest
  select(c(sex, religion, occupation, social_status, allegiance_last, allegiance_switched, dth_flag, featured_episode_count, prominence)) %>% 
# Convert to factor level
    mutate(sex = factor(sex, levels = c(1, 2, 9), labels = c("Male", "Female", "Unknown")),
    religion = factor(religion, levels = c(0, 1, 3, 4, 5, 6, 7, 9), labels = c("Great Stallion", "Lord of Light", "Faith of the Seven", "Old Gods", "Drowned God", "Many Faced God", "Other", "Unknown")),
    occupation = factor(occupation, levels = c(1, 2, 9), labels = c("Silk-collar", "Leather-collar", "Unknown")),
    social_status = factor(social_status, levels = c(1, 2, 9), labels = c("Highborn", "Lowborn", "Unknown")),
    allegiance_last = factor(allegiance_last, levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9), labels = c("Stark", "Targaryen", "Night's Watch", "Lannister", "Greyjoy", "Bolton", "Frey", "Other", "Unknown")),
    allegiance_switched = factor(allegiance_switched, levels = c(1, 2, 9), labels = c("No", "Yes", "Unknown")),
    dth_flag = factor(dth_flag, levels = c(0, 1), labels = c("Survived", "Died"))) %>%
# Remove NAs 
 na.omit()
```

```{r}
set.seed(19)

n_data <- nrow(clean_thrones)

test_index <- sample(1:n_data, size = n_data * 0.2)
thrones_test <- slice(clean_thrones, test_index)
thrones_train <- slice(clean_thrones, -test_index)
```

```{r}
thrones_test %>% 
  janitor::tabyl(dth_flag)

thrones_train %>% 
  janitor::tabyl(dth_flag)
```

```{r}
thrones_fit <- rpart(
  formula = dth_flag ~ .,
  data = thrones_train,
  method = "class"
)
```

```{r}
rpart.plot(thrones_fit,
           yesno = 2,
           fallen.leaves = T,
           faclen = 6,
           digits = 4)
```

The box is __labeled__ according to the majority for that box. 
The percentage is given according to the __most prominent__ class in the data 
(here it is death)

Node 1

Based on 2/3 of the data (66.67%) that passed through this node, 78% of
characters died.

Node 2

Based on 1/3 of the data that passed through this node, 18% of characters
died. Most others survived. 

```{r}
rpart.plot(thrones_fit,
           yesno = 2,
           fallen.leaves = T,
           faclen = 6,
           digits = 4,
           type = 4,
           extra = 101)
```

```{r}
rpart.rules(thrones_fit, cover = T)
```

# Use trained model to create predictions on test dataset

```{r}
library(modelr)

# add predictions to the model
thrones_test_pred <- thrones_test %>% 
  add_predictions(thrones_fit, type = "class")
```

```{r}
# see how we did on our predictions
thrones_test_pred %>% 
  select(dth_flag, pred, prominence, religion, allegiance_last, featured_episode_count)
```

# Model Performance

```{r}
# tidymodels
library(yardstick)

conf_mat <- thrones_test_pred %>% 
  conf_mat(truth = dth_flag, estimate = pred)

conf_mat

```

```{r}
# accuracy of model
thrones_test_pred %>% 
  accuracy(truth = dth_flag, estimate = pred)
```

```{r}
# sensitivity
thrones_test_pred %>% 
  sensitivity(truth = dth_flag, estimate = pred)
```

```{r}
thrones_test_pred %>% 
  specificity(truth = dth_flag, estimate = pred)
```

```{r}
library(caret)

confusionMatrix(thrones_test_pred$pred, thrones_test_pred$dth_flag)
```

# Random Forests

```{r}
library(ranger)

rf_classifier <- ranger(dth_flag ~ .,
                        data = thrones_train,
                        importance = "impurity",
                        num.trees = 1000,
                        mtry = 2,
                        min.node.size = 5)

# importance of features in tree
importance(rf_classifier)
```

```{r}
thrones_test_pred <- thrones_test_pred %>% 
  mutate(pred = predict(rf_classifier, data = thrones_test_pred)$predictions)

thrones_test_pred
```

```{r}
conf_mat

confusionMatrix(thrones_test_pred$pred, thrones_test_pred$dth_flag)
```

