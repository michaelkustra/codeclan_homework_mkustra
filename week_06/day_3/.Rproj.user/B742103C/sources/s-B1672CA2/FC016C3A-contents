---
title: "confidence int lab"
output: html_notebook
---
```{r}
library(tidyverse)
library(janitor)
library(infer)
```

# Question 1

## We are going to use a dataset on house sales in Ames, Iowa over a number of years. We will be interested in the SalePrice of houses (though we should clean_names() the data, so this will end up as sale_price). Load the data and explore it.

```{r}
house_sales <- read_csv(here::here("data/ames.csv")) %>% 
  clean_names()
```

# Question 2

## Plot a histogram of sale_price. Is the distribution normal?

```{r}
sale_price_hist <- house_sales %>% 
  ggplot(aes(x = sale_price)) +
  geom_histogram(colour = "grey40", fill = "tomato")

sale_price_hist
```

_Solution_

It appears to be right skewed and not normal.

# Question 3

## Calculate the population parameter mean of sale_price. Store it in a variable, as weâ€™ll need this value later when we check if each CI contains the parameter value or not.

```{r}
pop_sale_price_mean <- house_sales %>% 
  summarise(
    mean = mean(sale_price)
  )

pop_sale_price_mean
```

# Question 4

## 

```{r}
results <- tibble()
for (sample_num in 1:1000){

  # get a new 100-observation random sample from ames
  this_sample <- house_sales %>%
    rep_sample_n(size = 100, reps = 1) %>%
    ungroup() %>%
    select(sale_price)
  
  # create a bootstrap distribution of mean(sale_price)
  # use 1000 reps
  this_bootstrap <- this_sample %>%
    specify(response = sale_price) %>%
    generate(reps = 1000, type = "bootstrap") %>%
    calculate(stat = "mean")

  # get 95% CI for this bootstrap distribution
  this_ci <- this_bootstrap %>%
    get_ci(level = 0.95, type = "percentile")
  
  # prepare new row for results, storing CI bounds
  this_result <- c(
    sample_num = sample_num, 
    lower = this_ci %>% 
      pull(lower_ci), 
    upper = this_ci %>%
      pull(upper_ci)
  )
  
  # add this_result to growing tibble of results
  results <- results %>%
    bind_rows(this_result)
}
```


# Question 5

## Pipe results to mutate() to add a new variable popn_param_in_ci which will be TRUE if the population parameter we calculated earlier is between lower and upper, and FALSE otherwise.

```{r}

pop_sale_price <- mean(house_sales$sale_price)

results <- results %>% 
  mutate(popn_param_in_ci = ifelse(lower < pop_sale_price, 
                                    upper > pop_sale_price, TRUE))


```

# Question 6

## Perform an appropriate summarise() to determine the proportion of CIs that contain the population parameter. Our confidence level was 95% (equivalent to a proportion of 0.95). Is your proportion close to that value?

```{r}

results %>% 
  summarise(
    ci_95_check = sum(popn_param_in_ci)/n()
  )

```

