---
title: "conf ints and bootstrapping"
subtitle: "inferential statistics"
output: html_notebook
---

# Confidence Intervals

## Point Estimate

```{r}
library(tidyverse)
library(infer)
library(janitor)

telco <- read_csv(here::here("data/telecomms_churn.csv")) %>% 
  clean_names()

# sample 200
sample_200 <- telco %>% 
  rep_sample_n(size = 200, reps = 1)

summary_sample_200 <- sample_200 %>% 
    ungroup() %>% 
      summarise(
        mean_monthly_charges = mean(monthly_charges),
        mean_tenure = mean(tenure),
        prop_churn = mean(churn == "Yes")
      )

summary_sample_200
```

## 'Population' parameters

```{r}
summary_popn <- telco %>%
  summarise(
    mean_monthly_charges = mean(monthly_charges), 
    mean_tenure = mean(tenure),
    prop_churn = mean(churn == "Yes")
  ) 

summary_popn
```

_Confidence Intervals_ 

Gives us a sense of the variability of an estimate.
- Includes a lower and upper bound
- CI states a likely range of mean values or other statistics

_Interpretation_

From our 200 observations sample, the point estimate of mean(tenure) is 32.37
months with a 95% confidence interval of [29.1 to 36.1] months

From our 200 observation sample, the point estimate of mean(tenure) is 32.37
months with a 99% confidence interval of [28.1 to 37.1] months

95% CI - if we draw a sample of 100 and calculated a confidence interval for
each, we would expect on average 95 of these confidence intervals would contain
the true population parameters. 5 would not contain.

# Bootstrapping

```{r}
sample_200 <- read_csv(here::here("data/telecomms_churn_200_sample.csv"))
```

```{r}
library(infer)

bootstrap_resample_200 <- sample_200 %>% 
  rep_sample_n(size = 200, replace = TRUE, reps = 5000) %>% 
  summarise(
    mean_tenure = mean(tenure)
  )
```

```{r}
bootstrap_200_plot <- bootstrap_resample_200 %>% 
  ggplot(aes(x = mean_tenure)) +
  geom_histogram(colour = "grey40", fill = "sky blue", alpha = 0.7) +
  labs(x = "mean tenure from bootstrap 200 sample")

bootstrap_200_plot
```

```{r}
std_error_bootstrap <- bootstrap_resample_200 %>% 
  summarise(
    se_mean_tenure = sd(mean_tenure)
  )

std_error_bootstrap
```

# Confidence Interval from the bootstrap distribution

```{r}
bootstrap_resample_200 %>% 
  ggplot(aes(x = mean_tenure)) +
  geom_histogram(col = "grey40", fill = "seagreen", alpha = 0.7)
```

__95% confidence interval__

```{r}
ci_95 <- bootstrap_resample_200 %>% 
  summarise(
    mean = mean(mean_tenure),
    lower_bound = quantile(mean_tenure, probs = 0.025),
    upper_bound = quantile(mean_tenure, probs = 0.975)
  )

ci_95
```

```{r}
ci_99 <- bootstrap_resample_200 %>% 
  summarise(
    mean = mean(mean_tenure),
    lower_bound = quantile(mean_tenure, 0.005),
    upper_bound = quantile(mean_tenure, 0.995)
  )

ci_99
```

_Interpretation_

the 99% CI widens the range slightly to encapsulate more possible mean values.

# Infer package

```{r}
infer_resample <- sample_200 %>% 
  # which variable we are interested in
  specify(response = tenure) %>% 
  # the replicates to sample
  generate(reps = 5000, type = "bootstrap") %>% 
  # statistic we are interested in for each resample
  calculate(stat = "mean")

infer_resample
```

## Calcualte confidence intervals

```{r}
infer_ci_95 <- infer_resample %>% 
  get_confidence_interval(level = 0.95, type = "percentile")

infer_ci_95
```

## Visualisation of distribution and CI

```{r}
infer_resample %>% 
  visualise(bins = 25) +
  shade_confidence_interval(endpoints = infer_ci_95)
```

## Calculate Point Estimate

```{r}
mean_infer <- infer_resample %>% 
  summarise(mean = mean(stat))

mean_infer
```

# Confidence Interval for a proportion

```{r}
bootstrap_resample <- sample_200 %>% 
  specify(response = Churn, success = "Yes") %>% 
  generate(reps = 5000, type = "bootstrap") %>% 
  calculate(stat = "prop")

head(bootstrap_resample)
```

## 95% CI for churn proportion

```{r}
churn_ci_95 <- bootstrap_resample %>% 
  get_confidence_interval(level = 0.95, type = "percentile")
churn_ci_95
```
## Visualise churn proportion

```{r}
bootstrap_resample %>% 
  visualise(bins = 30) +
  shade_confidence_interval(endpoints = churn_ci_95)
```

